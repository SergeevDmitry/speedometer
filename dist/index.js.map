{"version":3,"sources":["../src/index.js"],"names":["express","require","bodyParser","helmet","compression","path","hbs","MongoClient","app","connect","process","env","MONGO_HOST","err","client","console","error","exit","db","MONGO_DBNAME","runApp","use","hsts","json","urlencoded","extended","set","join","__dirname","registerPartials","registerHelper","date","Date","toLocaleDateString","hour","minute","day","month","year","static","get","req","res","render","subscriptions","collection","find","sort","createdAt","toArray","post","email","body","subscription","findOne","sendStatus","updateOne","$currentDate","upsert","listen","PORT","log"],"mappings":"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","file":"index.js","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst helmet = require('helmet');\nconst compression = require('compression');\nconst path = require('path');\nconst hbs = require('hbs');\nconst MongoClient = require('mongodb').MongoClient;\n\n\nconst app = express();\n\nMongoClient.connect(process.env.MONGO_HOST, function(err, client) {\n  if (err) {\n    console.error(err);\n    process.exit(1);\n    return;\n  }\n\n  const db = client.db(process.env.MONGO_DBNAME);\n\n  runApp(db);\n});\n\nfunction runApp(db) {\n  /*\n   * Disable HSTS here, because we send this header via nginx\n   */\n  app.use(helmet({ hsts: false }));\n  app.use(compression());\n\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({ extended: true }));\n\n  app.set('views', path.join(__dirname + '/views'));\n  app.set('view engine', 'hbs');\n\n  // Register handlebars partials\n  hbs.registerPartials(path.join(__dirname + '/views/partials'));\n\n  hbs.registerHelper('format_date', (date) => {\n    return new Date(date).toLocaleDateString('en-GB', {\n      hour: '2-digit',\n      minute: '2-digit',\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric',\n    });\n  });\n\n  app.use(express.static(path.join(__dirname + '/public')));\n  app.use(express.static(path.join(__dirname + '/views')));\n\n  app.get('/', (req, res) => {\n    res.render('index');\n  });\n\n  app.get('/terms', (req, res) => {\n    res.render('terms');\n  });\n\n  app.get('/private-funding', async (req, res) => {\n    const subscriptions = await db.collection('investors').find().sort({ createdAt: -1 }).toArray();\n\n    res.render('private-funding', { subscriptions });\n  });\n\n  app.post('/investor-subscribe', async (req, res) => {\n    const { email } = req.body;\n\n    const subscription = await db.collection('investors').findOne({ email });\n\n    if (subscription) {\n      return res.sendStatus(422);\n    }\n\n    try {\n      await db.collection('investors').updateOne(\n        { email },\n        { $currentDate: { createdAt: true } },\n        { upsert: true }\n      );\n    }\n    catch (err) {\n      return res.sendStatus(400);\n    }\n\n    res.sendStatus(200);\n  });\n\n  app.post('/subscribe', async (req, res) => {\n    const { email } = req.body;\n\n    const subscription = await db.collection('subscriptions').findOne({ email });\n\n    if (subscription) {\n      return res.sendStatus(422);\n    }\n\n    try {\n      await db.collection('subscriptions').updateOne(\n        { email },\n        { $currentDate: { createdAt: true } },\n        { upsert: true }\n      );\n    }\n    catch (err) {\n      return res.sendStatus(400);\n    }\n\n    res.sendStatus(200);\n  });\n\n  app.listen(process.env.PORT, () => {\n    console.log('Listening on 5000');\n  });\n}\n"]}